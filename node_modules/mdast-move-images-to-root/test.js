const test = require('tape');
const unified = require('unified');
const remarkParse = require('remark-parse');
const inspect = require('unist-util-inspect');
const flattenImageParagraphs = require('./index');

test('it converts "* image" to "image" (moves them up until the root)', t => {
  t.plan(2);

  const markdown = `
# Title

> ## *Foo ![my image](./foo.png) ooF*

## ![other image](./bar.jpg)
`;

  const actualInput = unified()
    .use(remarkParse, {commonmark: true})
    .parse(markdown);

  // console.log(JSON.stringify(actualInput));
  console.log(inspect(actualInput));

  const expectedInput = {
    type: 'root',
    children: [
      {
        type: 'heading',
        depth: 1,
        children: [
          {
            type: 'text',
            value: 'Title',
            position: {
              start: {line: 2, column: 3, offset: 3},
              end: {line: 2, column: 8, offset: 8},
              indent: [],
            },
          },
        ],
        position: {
          start: {line: 2, column: 1, offset: 1},
          end: {line: 2, column: 8, offset: 8},
          indent: [],
        },
      },
      {
        type: 'blockquote',
        children: [
          {
            type: 'heading',
            depth: 2,
            children: [
              {
                type: 'emphasis',
                children: [
                  {
                    type: 'text',
                    value: 'Foo ',
                    position: {
                      start: {line: 4, column: 7, offset: 16},
                      end: {line: 4, column: 11, offset: 20},
                      indent: [],
                    },
                  },
                  {
                    type: 'image',
                    title: null,
                    url: './foo.png',
                    alt: 'my image',
                    position: {
                      start: {line: 4, column: 11, offset: 20},
                      end: {line: 4, column: 33, offset: 42},
                      indent: [],
                    },
                  },
                  {
                    type: 'text',
                    value: ' ooF',
                    position: {
                      start: {line: 4, column: 33, offset: 42},
                      end: {line: 4, column: 37, offset: 46},
                      indent: [],
                    },
                  },
                ],
                position: {
                  start: {line: 4, column: 6, offset: 15},
                  end: {line: 4, column: 38, offset: 47},
                  indent: [],
                },
              },
            ],
            position: {
              start: {line: 4, column: 3, offset: 12},
              end: {line: 4, column: 38, offset: 47},
              indent: [],
            },
          },
        ],
        position: {
          start: {line: 4, column: 1, offset: 10},
          end: {line: 4, column: 38, offset: 47},
          indent: [],
        },
      },
      {
        type: 'heading',
        depth: 2,
        children: [
          {
            type: 'image',
            title: null,
            url: './bar.jpg',
            alt: 'other image',
            position: {
              start: {line: 6, column: 4, offset: 52},
              end: {line: 6, column: 29, offset: 77},
              indent: [],
            },
          },
        ],
        position: {
          start: {line: 6, column: 1, offset: 49},
          end: {line: 6, column: 29, offset: 77},
          indent: [],
        },
      },
    ],
    position: {
      start: {line: 1, column: 1, offset: 0},
      end: {line: 7, column: 1, offset: 78},
    },
  };
  t.deepEquals(actualInput, expectedInput, 'input looks good');

  const actualOutput = flattenImageParagraphs()(actualInput);

  // console.log(JSON.stringify(actualOutput));
  console.log(inspect(actualOutput));

  const expectedOutput = {
    type: 'root',
    children: [
      {
        type: 'heading',
        depth: 1,
        children: [
          {
            type: 'text',
            value: 'Title',
            position: {
              start: {line: 2, column: 3, offset: 3},
              end: {line: 2, column: 8, offset: 8},
              indent: [],
            },
          },
        ],
        position: {
          start: {line: 2, column: 1, offset: 1},
          end: {line: 2, column: 8, offset: 8},
          indent: [],
        },
      },
      {
        type: 'blockquote',
        children: [
          {
            type: 'heading',
            depth: 2,
            children: [
              {
                type: 'emphasis',
                children: [
                  {
                    type: 'text',
                    value: 'Foo ',
                    position: {
                      start: {line: 4, column: 7, offset: 16},
                      end: {line: 4, column: 11, offset: 20},
                      indent: [],
                    },
                  },
                ],
                position: {
                  start: {line: 4, column: 6, offset: 15},
                  end: {line: 4, column: 38, offset: 47},
                  indent: [],
                },
              },
            ],
            position: {
              start: {line: 4, column: 3, offset: 12},
              end: {line: 4, column: 38, offset: 47},
              indent: [],
            },
          },
        ],
        position: {
          start: {line: 4, column: 1, offset: 10},
          end: {line: 4, column: 38, offset: 47},
          indent: [],
        },
      },
      {
        type: 'image',
        title: null,
        url: './foo.png',
        alt: 'my image',
        position: {
          start: {line: 4, column: 11, offset: 20},
          end: {line: 4, column: 33, offset: 42},
          indent: [],
        },
      },
      {
        type: 'blockquote',
        children: [
          {
            type: 'heading',
            depth: 2,
            children: [
              {
                type: 'emphasis',
                children: [
                  {
                    type: 'text',
                    value: ' ooF',
                    position: {
                      start: {line: 4, column: 33, offset: 42},
                      end: {line: 4, column: 37, offset: 46},
                      indent: [],
                    },
                  },
                ],
                position: {
                  start: {line: 4, column: 6, offset: 15},
                  end: {line: 4, column: 38, offset: 47},
                  indent: [],
                },
              },
            ],
            position: {
              start: {line: 4, column: 3, offset: 12},
              end: {line: 4, column: 38, offset: 47},
              indent: [],
            },
          },
        ],
        position: {
          start: {line: 4, column: 1, offset: 10},
          end: {line: 4, column: 38, offset: 47},
          indent: [],
        },
      },
      {
        type: 'image',
        title: null,
        url: './bar.jpg',
        alt: 'other image',
        position: {
          start: {line: 6, column: 4, offset: 52},
          end: {line: 6, column: 29, offset: 77},
          indent: [],
        },
      },
    ],
    position: {
      start: {line: 1, column: 1, offset: 0},
      end: {line: 7, column: 1, offset: 78},
    },
  };

  t.deepEquals(actualOutput, expectedOutput, 'output looks good');
});
