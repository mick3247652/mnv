const ssbKeys = require('ssb-keys');
const RNFS = require('react-native-fs');
const path = require('path');
exports.generate = ssbKeys.generate;
exports.signObj = ssbKeys.signObj;
exports.verifyObj = ssbKeys.verifyObj;
exports.box = ssbKeys.box;
exports.unbox = ssbKeys.unbox;
exports.load = function load(filename, cb) {
    RNFS.exists(filename).then((exists) => {
        if (exists) {
            return RNFS.readFile(filename, 'ascii').then((fileContents) => {
                const plainJson = fileContents.replace(/\s*\#[^\n]*/g, '')
                    .split('\n')
                    .filter((s) => s.length > 0)
                    .map((s) => s.trim())
                    .join('');
                cb(null, JSON.parse(plainJson));
            }, (err) => {
                cb(err);
            });
        }
        else {
            cb(new Error('keys file ' + filename + ' does not exist'));
        }
    });
};
exports.loadSync = function loadSync(filename) {
    throw new Error('Synchronous calls such as loadSync are not supported in React Native');
};
exports.create = function create(filename, curve, legacy, cb) {
    if (typeof legacy === 'function') {
        cb = legacy;
        legacy = false;
    }
    if (typeof curve === 'function') {
        cb = curve;
        curve = null;
    }
    const generatedKeys = ssbKeys.generate(curve);
    const fileContents = JSON.stringify(generatedKeys, null, 2);
    RNFS.mkdir(path.dirname(filename))
        .then(() => RNFS.writeFile(filename, fileContents, 'ascii'))
        .catch((err) => {
        cb(err);
    })
        .then(() => {
        cb(null, generatedKeys);
    });
};
exports.createSync = function createSync(filename, curve, legacy) {
    throw new Error('Synchronous calls such as createSync are not supported in React Native');
};
exports.loadOrCreate = function (filename, cb) {
    exports.load(filename, function (err, keys) {
        if (!err)
            return cb(null, keys);
        exports.create(filename, cb);
    });
};
exports.loadOrCreateSync = function (filename) {
    throw new Error('Synchronous calls like loadOrCreateSync are not supported in React Native');
};
//# sourceMappingURL=index.js.map