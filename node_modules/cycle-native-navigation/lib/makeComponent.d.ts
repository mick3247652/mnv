import { Stream } from 'xstream';
import { ComponentClass, ReactElement } from 'react';
import { Engine, MatchingMain, Drivers } from '@cycle/run';
import { ReactSource } from '@cycle/react';
import { Command } from './types';
import { NavSource } from './NavSource';
export declare type Props = {
    componentId: string;
};
export declare type State = {
    source: ReactSource | null;
    sink: Stream<ReactElement<any>> | null;
};
export declare type MoreSources = {
    screen: ReactSource;
    navigation: NavSource;
};
export declare type MoreSinks = {
    navigation?: Stream<Command>;
    screen?: Stream<ReactElement<any>>;
    navOptions?: Stream<any>;
};
export default function makeComponent<D extends Drivers, M extends MatchingMain<D, M>>(main: MatchingMain<D, M>, // (so: So & MoreSources) => Si & MoreSinks,
engine: Engine<D>, screenId: string): () => ComponentClass<Props>;
