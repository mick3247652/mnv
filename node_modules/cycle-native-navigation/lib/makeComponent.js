"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = require("xstream");
var react_1 = require("react");
var react_native_1 = require("react-native");
var react_native_navigation_1 = require("react-native-navigation");
var react_2 = require("@cycle/react");
var NavSource_1 = require("./NavSource");
function neverComplete(stream) {
    return xstream_1.default.merge(stream, xstream_1.default.never());
}
function makeComponent(main, // (so: So & MoreSources) => Si & MoreSinks,
engine, screenId) {
    return function () {
        var NavComponent = /** @class */ (function (_super) {
            __extends(NavComponent, _super);
            function NavComponent(props) {
                var _this = _super.call(this, props) || this;
                _this.state = { source: null, sink: null };
                _this.backHandler = _this.onBackPressed.bind(_this);
                _this.latestOpts = {};
                _this.navEventsSub = react_native_navigation_1.Navigation.events().bindComponent(_this);
                return _this;
            }
            NavComponent.prototype.componentDidMount = function () {
                var _this = this;
                var thisId = this.props.componentId;
                var source = new react_2.ReactSource();
                source._props$._n(this.props);
                var navSource = (this.navSource = new NavSource_1.NavSource());
                var sources = __assign({}, engine.sources, { screen: source, navigation: navSource, props: xstream_1.default
                        .of(this.props)
                        .compose(neverComplete)
                        .remember() });
                var sinks = main(sources);
                this.disposeRun = engine.run(sinks);
                var sink = sinks.screen || this.state.sink;
                if (sinks.navigation) {
                    this.commandSub = sinks.navigation.subscribe({
                        next: function (cmd) {
                            var id = cmd.id || thisId;
                            if (cmd.type === 'push')
                                react_native_navigation_1.Navigation.push(id, cmd.layout);
                            if (cmd.type === 'pop')
                                react_native_navigation_1.Navigation.pop(id, cmd.options);
                            if (cmd.type === 'popTo')
                                react_native_navigation_1.Navigation.popTo(id);
                            if (cmd.type === 'popToRoot')
                                react_native_navigation_1.Navigation.popToRoot(id);
                            if (cmd.type === 'showOverlay') {
                                react_native_navigation_1.Navigation.showOverlay(cmd.layout);
                            }
                            if (cmd.type === 'dismissOverlay') {
                                react_native_navigation_1.Navigation.dismissOverlay(id);
                            }
                            if (cmd.type === 'mergeOptions') {
                                react_native_navigation_1.Navigation.mergeOptions(id, __assign({}, _this.latestOpts, cmd.opts));
                            }
                        },
                    });
                }
                if (sinks.navOptions) {
                    this.navOptionsSub = sinks.navOptions.subscribe({
                        next: function (opts) {
                            _this.latestOpts = __assign({}, _this.latestOpts, opts);
                            react_native_navigation_1.Navigation.mergeOptions(thisId, _this.latestOpts);
                        },
                    });
                }
                react_native_1.BackHandler.addEventListener('hardwareBackPress', this.backHandler);
                this.setState({ source: source, sink: sink });
            };
            NavComponent.prototype.componentDidAppear = function () {
                if (!this.navSource)
                    return;
                this.navSource._didAppear._n(null);
            };
            NavComponent.prototype.render = function () {
                var _a = this.state, source = _a.source, sink = _a.sink;
                if (!source || !sink)
                    return null;
                return react_1.createElement(react_2.ScopeContext.Provider, { value: source._scope }, react_1.createElement(react_2.StreamRenderer, { stream: sink }));
            };
            NavComponent.prototype.componentDidUpdate = function (prevProps) {
                if (!this.state.source)
                    return;
                if (this.props === prevProps)
                    return;
                this.state.source._props$._n(this.props);
            };
            NavComponent.prototype.onBackPressed = function () {
                if (!this.navSource)
                    return false;
                if (this.navSource._back._ils.length === 0)
                    return false;
                this.navSource._back._n(null);
                return true;
            };
            NavComponent.prototype.navigationButtonPressed = function (_a) {
                var buttonId = _a.buttonId;
                if (!this.navSource)
                    return;
                this.navSource._topBar._n(buttonId);
            };
            NavComponent.prototype.componentDidDisappear = function () {
                if (!this.navSource)
                    return;
                this.navSource._didDisappear._n(null);
            };
            NavComponent.prototype.componentWillUnmount = function () {
                if (this.disposeRun)
                    this.disposeRun();
                if (this.commandSub)
                    this.commandSub.unsubscribe();
                if (this.navOptionsSub)
                    this.navOptionsSub.unsubscribe();
                this.navEventsSub.remove();
                react_native_1.BackHandler.removeEventListener('hardwareBackPress', this.backHandler);
                this.disposeRun = undefined;
                this.latestOpts = undefined;
            };
            return NavComponent;
        }(react_1.Component));
        return NavComponent;
    };
}
exports.default = makeComponent;
//# sourceMappingURL=makeComponent.js.map