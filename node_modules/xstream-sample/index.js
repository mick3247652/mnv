"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var xstream_1 = require("xstream");
var SampleListener = /** @class */ (function () {
    function SampleListener(p) {
        this.p = p;
        p.il = this;
    }
    SampleListener.prototype._n = function (t) {
        this.p.up(t);
    };
    SampleListener.prototype._e = function (err) {
        this.p._e(err);
    };
    SampleListener.prototype._c = function () {
        this.p.down();
    };
    return SampleListener;
}());
exports.SampleListener = SampleListener;
var SampleOperator = /** @class */ (function () {
    function SampleOperator(ins, sampled) {
        this.type = 'sample';
        this.ins = ins;
        this.sampled = sampled;
        this.out = xstream_1.NO;
        this.il = undefined;
        this.val = xstream_1.NO;
    }
    SampleOperator.prototype._start = function (out) {
        this.out = out;
        var s = this.sampled;
        s._add(new SampleListener(this));
        this.ins._add(this);
    };
    SampleOperator.prototype._stop = function () {
        this.ins._remove(this);
        if (this.il)
            this.sampled._remove(this.il);
        this.out = xstream_1.NO;
        this.val = xstream_1.NO;
        this.il = undefined;
    };
    SampleOperator.prototype._n = function (t) {
        var out = this.out;
        if (out === xstream_1.NO)
            return;
        var val = this.val;
        if (val === xstream_1.NO)
            return;
        out._n(val);
    };
    SampleOperator.prototype._e = function (err) {
        var out = this.out;
        if (out === xstream_1.NO)
            return;
        out._e(err);
    };
    SampleOperator.prototype._c = function () {
        var out = this.out;
        if (out === xstream_1.NO)
            return;
        out._c();
    };
    SampleOperator.prototype.up = function (t) {
        if (this.out === xstream_1.NO)
            return;
        this.val = t;
    };
    SampleOperator.prototype.down = function () {
        if (this.il)
            this.sampled._remove(this.il);
    };
    return SampleOperator;
}());
exports.SampleOperator = SampleOperator;
/**
 * The result stream will emit the latest events from the "sampled" stream
 * (provided as argument to this operator), only when the source stream emits.
 *
 * @param {Stream} sampled The stream to be sampled by the source stream
 * @return {Stream}
 */
function sample(sampled) {
    return function sampleOperator(source) {
        return new xstream_1.Stream(new SampleOperator(source, sampled));
    };
}
exports.default = sample;
//# sourceMappingURL=index.js.map