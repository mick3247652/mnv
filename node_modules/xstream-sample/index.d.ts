import { InternalListener, Operator, Stream, NO } from 'xstream';
export declare class SampleListener<T> implements InternalListener<T> {
    private p;
    constructor(p: SampleOperator<any>);
    _n(t: T): void;
    _e(err: any): void;
    _c(): void;
}
export declare class SampleOperator<T> implements Operator<any, T> {
    type: string;
    ins: Stream<any>;
    sampled: Stream<T>;
    out: Stream<T>;
    il?: SampleListener<T>;
    val: T | typeof NO;
    constructor(ins: Stream<any>, sampled: Stream<T>);
    _start(out: Stream<T>): void;
    _stop(): void;
    _n(t: any): void;
    _e(err: any): void;
    _c(): void;
    up(t: any): void;
    down(): void;
}
/**
 * The result stream will emit the latest events from the "sampled" stream
 * (provided as argument to this operator), only when the source stream emits.
 *
 * @param {Stream} sampled The stream to be sampled by the source stream
 * @return {Stream}
 */
export default function sample<T>(sampled: Stream<T>): (source: Stream<any>) => Stream<T>;
