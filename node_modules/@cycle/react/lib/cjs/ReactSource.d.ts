import { Stream, MemoryStream } from 'xstream';
import { ReactElement } from 'react';
import { Scope } from './scope';
declare type Sink = Stream<ReactElement<any>>;
export declare class ReactSource<P = any> {
    _selector: string | symbol | null;
    _scope: Scope;
    _props$: MemoryStream<P>;
    _childScopes: Map<string, Scope>;
    constructor(scope?: Scope, selector?: string | symbol | null, props$?: MemoryStream<P>);
    select(selector: string | symbol): ReactSource;
    events(eventType: string): Stream<any>;
    props(): MemoryStream<P>;
    private getChildScope;
    isolateSink(sink: Sink, scopeId: string): Sink;
    isolateSource(source: ReactSource, scopeId: string): ReactSource;
}
export {};
