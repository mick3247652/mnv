import { ReactElement, ComponentType } from 'react';
import { Stream } from 'xstream';
import { MatchingDrivers, MatchingMain } from '@cycle/run';
import { ReactSource } from './ReactSource';
declare type CycleReactEngine = {
    source: ReactSource;
    sink: Stream<ReactElement<any>>;
    events?: {
        [name: string]: Stream<any>;
    };
    dispose?: () => void;
};
declare type RunOnDidMount = () => CycleReactEngine;
export declare function makeCycleReactComponent<P = any>(run: RunOnDidMount): ComponentType<P>;
export declare function makeComponent<D extends MatchingDrivers<D, M>, M extends MatchingMain<D, M>, P = any>(main: MatchingMain<D, M>, drivers?: MatchingDrivers<D, M>, channel?: string): ComponentType<P>;
export {};
