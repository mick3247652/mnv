"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var context_1 = require("./context");
var wrapperComponents = new Map();
var Incorporator = /** @class */ (function (_super) {
    __extends(Incorporator, _super);
    function Incorporator(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { flip: false };
        _this.selector = props.targetProps.sel;
        return _this;
    }
    Incorporator.prototype.componentDidMount = function () {
        var _this = this;
        this.unsubscribe = this.props.scope.subscribe(this.selector, function () {
            _this.setState(function (prev) { return ({ flip: !prev.flip }); });
        });
    };
    Incorporator.prototype.incorporateHandlers = function (props, scope) {
        var handlers = scope.getSelectorHandlers(this.selector);
        var _loop_1 = function (evType) {
            var onFoo = "on" + evType[0].toUpperCase() + evType.slice(1);
            props[onFoo] = function (ev) { return handlers[evType]._n(ev); };
        };
        for (var _i = 0, _a = Object.keys(handlers); _i < _a.length; _i++) {
            var evType = _a[_i];
            _loop_1(evType);
        }
        return props;
    };
    Incorporator.prototype.materializeTargetProps = function () {
        var _a = this.props, targetProps = _a.targetProps, targetRef = _a.targetRef, scope = _a.scope;
        var output = __assign({}, targetProps);
        output = this.incorporateHandlers(output, scope);
        if (targetRef) {
            output.ref = targetRef;
        }
        delete output.sel;
        return output;
    };
    Incorporator.prototype.render = function () {
        var target = this.props.target;
        var targetProps = this.materializeTargetProps();
        if (targetProps.children) {
            return react_1.createElement(target, targetProps, targetProps.children);
        }
        else {
            return react_1.createElement(target, targetProps);
        }
    };
    Incorporator.prototype.componentWillUnmount = function () {
        this.unsubscribe();
    };
    return Incorporator;
}(react_1.PureComponent));
exports.Incorporator = Incorporator;
function incorporate(type) {
    if (!wrapperComponents.has(type)) {
        wrapperComponents.set(type, react_1.forwardRef(function (props, ref) {
            return react_1.createElement(context_1.ScopeContext.Consumer, null, function (scope) {
                return react_1.createElement(Incorporator, {
                    targetProps: props,
                    targetRef: ref,
                    target: type,
                    scope: scope,
                });
            });
        }));
    }
    return wrapperComponents.get(type);
}
exports.incorporate = incorporate;
//# sourceMappingURL=incorporate.js.map