"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
function propifyMethods(Comp) {
    var names = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        names[_i - 1] = arguments[_i];
    }
    var PMC = /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1(props) {
            var _this = _super.call(this, props) || this;
            _this.ref = react_1.createRef ? react_1.createRef() : null;
            _this.subscriptions = {};
            return _this;
        }
        class_1.prototype.getInstanceAndMethod = function (name) {
            if (this.ref[name])
                return [this.ref, this.ref[name]];
            var instance = this.ref.current || this.ref.value;
            return [instance, instance[name]];
        };
        class_1.prototype.componentDidMount = function () {
            var _this = this;
            var _a = this, props = _a.props, subscriptions = _a.subscriptions;
            names.forEach(function (name) {
                var streamName = name + '$';
                if (props[streamName]) {
                    var observable = props[streamName];
                    subscriptions[name] = observable.subscribe({
                        next: function (args) {
                            if (!_this.ref)
                                return;
                            var _a = _this.getInstanceAndMethod(name), instance = _a[0], method = _a[1];
                            if (!method)
                                return;
                            if (Array.isArray(args)) {
                                method.apply(instance, args);
                            }
                            else {
                                method.call(instance, args);
                            }
                        },
                    });
                }
            });
        };
        class_1.prototype.componentWillUnmount = function () {
            var subs = this.subscriptions;
            var name;
            for (var n = names.length, i = 0; i < n; i++) {
                name = names[i];
                if (subs[name])
                    subs[name].unsubscribe();
            }
            this.subscriptions = {};
        };
        class_1.prototype.render = function () {
            var _this = this;
            var ref = this.ref;
            if (!ref) {
                ref = function (r) {
                    if (r)
                        _this.ref = r;
                };
            }
            return react_1.createElement(Comp, __assign({}, this.props, { ref: ref }), this.props.children);
        };
        return class_1;
    }(react_1.Component));
    PMC.displayName =
        'PropifiedMethods(' +
            (Comp.displayName || Comp.name || 'Component') +
            ')';
    return PMC;
}
exports.propifyMethods = propifyMethods;
//# sourceMappingURL=index.js.map